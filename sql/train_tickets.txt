sudo su - postgres -c "initdb --locale ru_RU.UTF-8 -E UTF8 -D '/var/lib/postgres/data'"

WARNING: enabling "trust" authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.

Success. You can now start the database server using:

    pg_ctl -D /var/lib/postgres/data -l logfile start

systemctl start postgresql
systemctl status postgresql

Дополнительно его можно добавить в автозагрузку
$ systemctl enable postgresql

https://wiki.archlinux.org/index.php/PostgreSQL_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)

psql -h localhost -p 5432 -U postgres
CREATE DATABASE rzd ENCODING='UTF8' CONNECTION LIMIT=-1;
выйти \q

psql -h localhost -p 5432 -U postgres --db rzd

// дамп
pg_dump -f ../rzd.dump -p 5432 -h localhost -U postgres rzd

// типы вагонов
CREATE TABLE IF NOT EXISTS carriage_types (id_carriage_type int, name varchar(256), seats_count int);
ALTER TABLE carriage_types ADD PRIMARY KEY (id_carriage_type);

INSERT INTO carriage_types(id_carriage_type, name, seats_count) VALUES (1, 'плацкарт', 54);
INSERT INTO carriage_types(id_carriage_type, name, seats_count) VALUES (2, 'купе', 36);
INSERT INTO carriage_types(id_carriage_type, name, seats_count) VALUES (3, 'СВ', 18);
INSERT INTO carriage_types(id_carriage_type, name, seats_count) VALUES (4, 'сидячий', 66);
INSERT INTO carriage_types(id_carriage_type, name, seats_count) VALUES (5, 'двухэтажный', 64);

// вагоны
CREATE TABLE IF NOT EXISTS carriages (id_carriage bigserial PRIMARY KEY, id_train int, departure_time timestamp without time zone, carriage_number int, id_carriage_type int);
ALTER TABLE carriages ADD CONSTRAINT fk_carriage_type FOREIGN KEY (id_carriage_type) REFERENCES carriage_types(id_carriage_type);

// поезда
CREATE TABLE IF NOT EXISTS trains (id_train int PRIMARY KEY, name varchar(256), departure_time time without time zone, departure_days varchar(256));
ALTER TABLE carriages ADD CONSTRAINT fk_carriages_trains FOREIGN KEY (id_train) REFERENCES trains(id_train);

INSERT INTO trains (id_train, name, departure_time, departure_days) VALUES (617, 'Белые ночи', '19:13', 'ежд');
INSERT INTO trains (id_train, name, departure_time, departure_days) VALUES (618, 'Белые ночи', '20:40', 'ежд');

// станции
CREATE TABLE IF NOT EXISTS stations (id_station serial PRIMARY KEY, name varchar(256));
INSERT INTO stations (name) VALUES ('Санкт-Петербург');

// поезда-станции
CREATE TABLE IF NOT EXISTS trains_stations (id_train int, id_station int, travel_time int, stay_time int);
ALTER TABLE trains_stations ADD CONSTRAINT fk_trains_stations_trains FOREIGN KEY (id_train) REFERENCES trains(id_train);
ALTER TABLE trains_stations ADD CONSTRAINT fk_trains_stations_stations FOREIGN KEY (id_station) REFERENCES stations(id_station);
INSERT INTO trains_stations (id_train, id_station, travel_time, stay_time) VALUES (617, 1, 753, 0);

// юзеры
CREATE TABLE IF NOT EXISTS users (id_user bigint, surname varchar(256), name varchar(256), patronymic varchar(256), birthday date, phone bigint, email varchar(256), registration_date timestamp without time zone DEFAULT NOW());
ALTER TABLE users ADD PRIMARY KEY (id_user);
INSERT INTO users (id_user, surname, name, patronymic, birthday, phone, email, registration_date) VALUES (4200831567, 'Пупкин', 'Василий', 'Кумарович', '31-May-1990', 79211234567, 'vpupkin@gmail.com', '2018-12-14 15:23:47');

--alter table users add column registration_date timestamp without time zone DEFAULT NOW();
--update users set registration_date='2018-12-14 15:23:47' where id_user=4200831567;

// места
CREATE TABLE IF NOT EXISTS seats (id_seat bigserial PRIMARY KEY, id_carriage bigint, seat_number int, stage_1 bool, stage_2 bool, stage_3 bool, stage_4 bool, stage_5 bool, stage_6 bool, stage_7 bool, stage_8 bool, stage_9 bool, stage_10 bool, stage_11 bool, stage_12 bool, stage_13 bool, stage_14 bool, stage_15 bool, stage_16 bool, stage_17 bool, stage_18 bool, stage_19 bool, stage_20 bool, stage_21 bool, stage_22 bool, stage_23 bool, stage_24 bool, stage_25 bool, stage_26 bool, stage_27 bool, stage_28 bool, stage_29 bool, stage_30 bool, stage_31 bool, stage_32 bool, stage_33 bool, stage_34 bool, stage_35 bool, stage_36 bool, stage_37 bool, stage_38 bool, stage_39 bool, stage_40 bool, stage_41 bool, stage_42 bool, stage_43 bool, stage_44 bool, stage_45 bool, stage_46 bool, stage_47 bool, stage_48 bool, stage_49 bool, stage_50 bool, stage_51 bool, stage_52 bool, stage_53 bool, stage_54 bool, stage_55 bool, stage_56 bool, stage_57 bool, stage_58 bool, stage_59 bool, stage_60 bool, stage_61 bool, stage_62 bool, stage_63 bool, stage_64 bool, stage_65 bool, stage_66 bool, stage_67 bool, stage_68 bool, stage_69 bool, stage_70 bool, stage_71 bool, stage_72 bool, stage_73 bool, stage_74 bool, stage_75 bool, stage_76 bool, stage_77 bool, stage_78 bool, stage_79 bool, stage_80 bool, stage_81 bool, stage_82 bool, stage_83 bool, stage_84 bool, stage_85 bool, stage_86 bool, stage_87 bool, stage_88 bool, stage_89 bool, stage_90 bool, stage_91 bool, stage_92 bool, stage_93 bool, stage_94 bool, stage_95 bool, stage_96 bool, stage_97 bool, stage_98 bool, stage_99 bool, stage_100 bool, stage_101 bool, stage_102 bool, stage_103 bool, stage_104 bool, stage_105 bool, stage_106 bool, stage_107 bool, stage_108 bool, stage_109 bool, stage_110 bool, stage_111 bool, stage_112 bool, stage_113 bool, stage_114 bool, stage_115 bool, stage_116 bool, stage_117 bool, stage_118 bool, stage_119 bool, stage_120 bool, stage_121 bool, stage_122 bool, stage_123 bool, stage_124 bool, stage_125 bool, stage_126 bool, stage_127 bool, stage_128 bool, stage_129 bool, stage_130 bool, stage_131 bool, stage_132 bool, stage_133 bool, stage_134 bool, stage_135 bool, stage_136 bool, stage_137 bool, stage_138 bool, stage_139 bool, stage_140 bool, stage_141 bool, stage_142 bool, stage_143 bool, stage_144 bool, stage_145 bool, stage_146 bool, stage_147 bool, stage_148 bool, stage_149 bool, stage_150 bool);

CREATE TABLE IF NOT EXISTS seats (id_seat bigserial PRIMARY KEY, id_carriage bigint, seat_number int, stage_1 bool DEFAULT 'f', stage_2 bool DEFAULT 'f', stage_3 bool DEFAULT 'f', stage_4 bool DEFAULT 'f', stage_5 bool DEFAULT 'f', stage_6 bool DEFAULT 'f', stage_7 bool DEFAULT 'f', stage_8 bool DEFAULT 'f', stage_9 bool DEFAULT 'f', stage_10 bool DEFAULT 'f', stage_11 bool DEFAULT 'f', stage_12 bool DEFAULT 'f', stage_13 bool DEFAULT 'f', stage_14 bool DEFAULT 'f', stage_15 bool DEFAULT 'f', stage_16 bool DEFAULT 'f', stage_17 bool DEFAULT 'f', stage_18 bool DEFAULT 'f', stage_19 bool DEFAULT 'f', stage_20 bool DEFAULT 'f', stage_21 bool DEFAULT 'f', stage_22 bool DEFAULT 'f', stage_23 bool DEFAULT 'f', stage_24 bool DEFAULT 'f', stage_25 bool DEFAULT 'f', stage_26 bool DEFAULT 'f', stage_27 bool DEFAULT 'f', stage_28 bool DEFAULT 'f', stage_29 bool DEFAULT 'f', stage_30 bool DEFAULT 'f', stage_31 bool DEFAULT 'f', stage_32 bool DEFAULT 'f', stage_33 bool DEFAULT 'f', stage_34 bool DEFAULT 'f', stage_35 bool DEFAULT 'f', stage_36 bool DEFAULT 'f', stage_37 bool DEFAULT 'f', stage_38 bool DEFAULT 'f', stage_39 bool DEFAULT 'f', stage_40 bool DEFAULT 'f', stage_41 bool DEFAULT 'f', stage_42 bool DEFAULT 'f', stage_43 bool DEFAULT 'f', stage_44 bool DEFAULT 'f', stage_45 bool DEFAULT 'f', stage_46 bool DEFAULT 'f', stage_47 bool DEFAULT 'f', stage_48 bool DEFAULT 'f', stage_49 bool DEFAULT 'f', stage_50 bool DEFAULT 'f', stage_51 bool DEFAULT 'f', stage_52 bool DEFAULT 'f', stage_53 bool DEFAULT 'f', stage_54 bool DEFAULT 'f', stage_55 bool DEFAULT 'f', stage_56 bool DEFAULT 'f', stage_57 bool DEFAULT 'f', stage_58 bool DEFAULT 'f', stage_59 bool DEFAULT 'f', stage_60 bool DEFAULT 'f', stage_61 bool DEFAULT 'f', stage_62 bool DEFAULT 'f', stage_63 bool DEFAULT 'f', stage_64 bool DEFAULT 'f', stage_65 bool DEFAULT 'f', stage_66 bool DEFAULT 'f', stage_67 bool DEFAULT 'f', stage_68 bool DEFAULT 'f', stage_69 bool DEFAULT 'f', stage_70 bool DEFAULT 'f', stage_71 bool DEFAULT 'f', stage_72 bool DEFAULT 'f', stage_73 bool DEFAULT 'f', stage_74 bool DEFAULT 'f', stage_75 bool DEFAULT 'f', stage_76 bool DEFAULT 'f', stage_77 bool DEFAULT 'f', stage_78 bool DEFAULT 'f', stage_79 bool DEFAULT 'f', stage_80 bool DEFAULT 'f', stage_81 bool DEFAULT 'f', stage_82 bool DEFAULT 'f', stage_83 bool DEFAULT 'f', stage_84 bool DEFAULT 'f', stage_85 bool DEFAULT 'f', stage_86 bool DEFAULT 'f', stage_87 bool DEFAULT 'f', stage_88 bool DEFAULT 'f', stage_89 bool DEFAULT 'f', stage_90 bool DEFAULT 'f', stage_91 bool DEFAULT 'f', stage_92 bool DEFAULT 'f', stage_93 bool DEFAULT 'f', stage_94 bool DEFAULT 'f', stage_95 bool DEFAULT 'f', stage_96 bool DEFAULT 'f', stage_97 bool DEFAULT 'f', stage_98 bool DEFAULT 'f', stage_99 bool DEFAULT 'f', stage_100 bool DEFAULT 'f', stage_101 bool DEFAULT 'f', stage_102 bool DEFAULT 'f', stage_103 bool DEFAULT 'f', stage_104 bool DEFAULT 'f', stage_105 bool DEFAULT 'f', stage_106 bool DEFAULT 'f', stage_107 bool DEFAULT 'f', stage_108 bool DEFAULT 'f', stage_109 bool DEFAULT 'f', stage_110 bool DEFAULT 'f', stage_111 bool DEFAULT 'f', stage_112 bool DEFAULT 'f', stage_113 bool DEFAULT 'f', stage_114 bool DEFAULT 'f', stage_115 bool DEFAULT 'f', stage_116 bool DEFAULT 'f', stage_117 bool DEFAULT 'f', stage_118 bool DEFAULT 'f', stage_119 bool DEFAULT 'f', stage_120 bool DEFAULT 'f', stage_121 bool DEFAULT 'f', stage_122 bool DEFAULT 'f', stage_123 bool DEFAULT 'f', stage_124 bool DEFAULT 'f', stage_125 bool DEFAULT 'f', stage_126 bool DEFAULT 'f', stage_127 bool DEFAULT 'f', stage_128 bool DEFAULT 'f', stage_129 bool DEFAULT 'f', stage_130 bool DEFAULT 'f', stage_131 bool DEFAULT 'f', stage_132 bool DEFAULT 'f', stage_133 bool DEFAULT 'f', stage_134 bool DEFAULT 'f', stage_135 bool DEFAULT 'f', stage_136 bool DEFAULT 'f', stage_137 bool DEFAULT 'f', stage_138 bool DEFAULT 'f', stage_139 bool DEFAULT 'f', stage_140 bool DEFAULT 'f', stage_141 bool DEFAULT 'f', stage_142 bool DEFAULT 'f', stage_143 bool DEFAULT 'f', stage_144 bool DEFAULT 'f', stage_145 bool DEFAULT 'f', stage_146 bool DEFAULT 'f', stage_147 bool DEFAULT 'f', stage_148 bool DEFAULT 'f', stage_149 bool DEFAULT 'f', stage_150 bool DEFAULT 'f');

ALTER TABLE seats ADD CONSTRAINT fk_seats_carriages FOREIGN KEY (id_carriage) REFERENCES carriages(id_carriage);

// билеты
CREATE TABLE IF NOT EXISTS tickets (id_ticket bigserial PRIMARY KEY, id_seat bigint, departure_station int, destination_station int, id_user bigint, 
buy_date timestamp without time zone DEFAULT NOW());
ALTER TABLE tickets ADD CONSTRAINT fk_tickets_seats FOREIGN KEY (id_seat) REFERENCES seats(id_seat);
ALTER TABLE tickets ADD CONSTRAINT fk_tickets_stations_departure FOREIGN KEY (departure_station) REFERENCES stations(id_station);
ALTER TABLE tickets ADD CONSTRAINT fk_tickets_stations_destination FOREIGN KEY (destination_station) REFERENCES stations(id_station);
ALTER TABLE tickets ADD CONSTRAINT fk_tickets_users FOREIGN KEY (id_user) REFERENCES users(id_user);

--alter table tickets add column buy_date timestamp without time zone DEFAULT NOW();

про запуск джоб по расписанию в постгресе pgpro_scheduler 
pgagent в пгадмине
https://habr.com/company/postgrespro/blog/335798/

// на все дни
select t1.id_train from (select * from trains_stations where id_station=1) as t1 inner join (select * from trains_stations where id_station=7) as t2 on (t1.id_train=t2.id_train and t1.travel_time<t2.travel_time);
 id_train 
----------
      618
(1 row)

// на заданный день
select distinct carriages.id_train  from carriages inner join (select t1.id_train from (select * from trains_stations where id_station=1) as t1 inner join (select * from trains_stations where id_station=7) as t2 on (t1.id_train=t2.id_train and t1.travel_time<t2.travel_time)) as t3 on (carriages.id_train=t3.id_train and departure_time>='2018-12-14 00:00:00' and departure_time<='2018-12-14 23:59:59') order by carriages.id_train;
 id_train 
----------
      618
(1 row)

// на заданный день правильно
select distinct carriages.id_train  from carriages inner join (select t1.id_train, t1.travel_time, t1.stay_time from (select * from trains_stations where id_station=1) as t1 inner join (select * from trains_stations where id_station=7) as t2 on (t1.id_train=t2.id_train and t1.travel_time<t2.travel_time)) as t3 on (carriages.id_train=t3.id_train and departure_time+(t3.travel_time+t3.stay_time)*interval '1 minute'>='2018-12-14 00:00:00' and departure_time+(t3.travel_time+t3.stay_time)*interval '1 minute'<='2018-12-14 23:59:59') order by carriages.id_train;
 id_train 
----------
      618
(1 row)

// свободные места
select * from seats inner join (select * from carriages where id_train=618 and departure_time='2018-12-14 20:40:00') as t1 on seats.id_carriage=t1.id_carriage where stage_1='f' and stage_2='f';

SELECT id_seat, seat_number, t1.carriage_number, t1.id_carriage_type FROM seats INNER JOIN (SELECT * FROM carriages WHERE id_train=618 AND departure_time+
203*interval '1 minute'>='2018-12-15 00:00:00' AND departure_time+203*interval '1 minute'<='2018-12-15 23:59:59') AS t1 
ON seats.id_carriage=t1.id_carriage WHERE stage_1='f' and stage_2='f' limit 10;

SELECT id_seat, seat_number, carriage_number, id_carriage_type FROM seats INNER JOIN carriages  
ON seats.id_carriage=carriages.id_carriage WHERE id_train=618 AND departure_time+
203*interval '1 minute'>='2018-12-15 00:00:00' AND departure_time+203*interval '1 minute'<='2018-12-15 23:59:59' AND stage_1='f' and stage_2='f' limit 10;


// первый номер участка
select count(1) from trains_stations where id_train=618 and travel_time<=(select travel_time from trains_stations where id_train=618 and id_station=3);

// последний номер участка
select count(1) from trains_stations where id_train=618 and travel_time<(select travel_time from trains_stations where id_train=618 and id_station=6);

SELECT id_station FROM stations WHERE name ILIKE 'каДУй';

// станция отправления 
select * from stations where id_station=(select id_station from trains_stations where id_train=618 and travel_time=0);

// станция назначения
select * from stations where id_station=(select id_station from trains_stations where id_train=618 order by travel_time desc limit 1);

select travel_time+stay_time from trains_stations where id_train=618 and id_station=3;
select travel_time from trains_stations where id_train=618 and id_station=3;

// номер поезда по айдишнику места
select id_train from carriages where id_carriage=(select id_carriage from seats where id_seat=10);

// просетить куки
String response = "HTTP/1.1 200 OK\r\n" + "Server: misha-sma-Server/2012\r\n"
+ "Content-Type: text/html\r\n" + "Set-Cookie: SSSAAAA=GGGDDDDD\r\n" + "cookie: SSS=GGG;path=/\r\n"
+ "Connection: close\r\n\r\n";

// 
select departure_time from carriages where id_carriage=(select id_carriage from seats where id_seat=90);

